package corpus;

import java.io.*;
import java.util.*;

public class EvaluateLabelers {

	/**
	 * @param args
	 */
	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		String sLine_gold = null;
		String sLine_pred = null;
		BufferedReader in_gold = new BufferedReader(new InputStreamReader(
				new FileInputStream(args[0]), "UTF8"));
		int column_gold = Integer.parseInt(args[1]);
		
		BufferedReader in_pred = new BufferedReader(new InputStreamReader(
				new FileInputStream(args[2]), "UTF8"));
		int column_pred = Integer.parseInt(args[3]);
		

		SeqMetric metric = new SeqMetric();
		List<String> goldLabels = new ArrayList<String>();
		List<String> predLabels = new ArrayList<String>();
		while ((sLine_gold = in_gold.readLine()) != null
			  && (sLine_pred = in_pred.readLine()) != null ) {
			sLine_gold = sLine_gold.trim();
			sLine_pred = sLine_pred.trim();
			if(sLine_gold.equals(""))
			{
				if(!sLine_pred.equals(""))
				{
					System.out.println("error: " + sLine_pred);
				}
				if(goldLabels.size() > 0)
				{
					SegEvaluation(goldLabels, predLabels, metric);
				}
				
				goldLabels = new ArrayList<String>();
				predLabels = new ArrayList<String>();
				continue;
			}
			else
			{
				String[] smallunits_gold = sLine_gold.split("\\s+");
				if(column_gold >= 0)
				{
					if(smallunits_gold.length < column_gold + 1)
					{
						System.out.println("error: " + sLine_gold);
						continue;
					}
					
					goldLabels.add(smallunits_gold[column_gold]);
				}
				else
				{
					if(smallunits_gold.length < -column_gold)
					{
						System.out.println("error: " + sLine_gold);
						continue;
					}
					
					goldLabels.add(smallunits_gold[smallunits_gold.length + column_gold]);
				}

				String[] smallunits_pred = sLine_pred.split("\\s+");
				if(column_pred >= 0)
				{
					if(smallunits_pred.length < column_pred + 1)
					{
						System.out.println("error: " + sLine_pred);
						continue;
					}
					
					predLabels.add(smallunits_pred[column_pred]);
				}
				else
				{
					if(smallunits_pred.length < -column_pred)
					{
						System.out.println("error: " + sLine_pred);
						continue;
					}
					
					predLabels.add(smallunits_pred[smallunits_pred.length + column_pred]);
				}
			}			
		}
		
		if(goldLabels.size() > 0)
		{
			SegEvaluation(goldLabels, predLabels, metric);
		}

		metric.print();
	}

	
	public static void SegEvaluation(List<String> goldLabels, List<String> predLabels, SeqMetric metric)
	{

		Set<String> goldSegs = getSegs(goldLabels);
		Set<String> otherSegs = getSegs(predLabels);
		metric.overall_label_count = metric.overall_label_count + goldSegs.size();
		metric.predicated_label_count = metric.predicated_label_count + otherSegs.size();
		
		for(String oneSeg : goldSegs)
		{
			if(otherSegs.contains(oneSeg))metric.correct_label_count++;;
		}
	}
	
	
	public static Set<String> getSegs(List<String> labels)
	{
		Set<String> results = new HashSet<String>();
		int beginId = 0;
		for(int idx = 1; idx < labels.size(); idx++)
		{
			String curLabel = labels.get(idx).toLowerCase();
			if(!curLabel.startsWith("i-"))
			{
				String label = labels.get(beginId);
				if(label.startsWith("b-") && label.length() > 3)
				{
					label = label.substring(2);							
					String oneSeg = String.format("[%d,%d]%s", beginId, idx-1, label);
					results.add(oneSeg);
				}
				beginId = idx;
			}
		}
		
		{
			String label = labels.get(beginId);
			if(label.startsWith("b-") && label.length() > 3)
			{
				label = label.substring(2);
				String oneSeg = String.format("[%d,%d]%s", beginId, labels.size()-1, label);
				results.add(oneSeg);
			}
			
		}
		
		
		return results;
	}
}
